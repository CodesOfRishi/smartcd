#!/usr/bin/env bash

# ███████╗███╗   ███╗ █████╗ ██████╗ ████████╗ ██████╗██████╗ 
# ██╔════╝████╗ ████║██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██╔══██╗
# ███████╗██╔████╔██║███████║██████╔╝   ██║   ██║     ██║  ██║
# ╚════██║██║╚██╔╝██║██╔══██║██╔══██╗   ██║   ██║     ██║  ██║
# ███████║██║ ╚═╝ ██║██║  ██║██║  ██║   ██║   ╚██████╗██████╔╝
# ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝╚═════╝ Rishi K. (https://github.com/CodesOfRishi)

# configure SMARTCD_CONFIG_DIR env
[[ -v SMARTCD_CONFIG_DIR && -d $SMARTCD_CONFIG_DIR ]] || export SMARTCD_CONFIG_DIR=$HOME/.config/.smartcd

# configure SMARTCD_CONFIG_FILE env
if [[ -v SMARTCD_CONFIG_FILE ]]; then 
	export SMARTCD_CONFIG_FILE=$SMARTCD_CONFIG_DIR/$SMARTCD_CONFIG_FILE
else
	export SMARTCD_CONFIG_FILE=$SMARTCD_CONFIG_DIR/smartcd.log
fi

[[ -d $SMARTCD_CONFIG_DIR ]] || mkdir -p $SMARTCD_CONFIG_DIR
[[ -f $SMARTCD_CONFIG_FILE ]] || touch $SMARTCD_CONFIG_FILE

# configure REC_LISTING_CMD env
if [[ -v REC_LISTING_CMD ]]; then 
	export REC_LISTING_CMD
elif [[ `which exa` == *exa ]]; then 
	export REC_LISTING_CMD="exa -TaF -I '.git' --icons --group-directories-first --git-ignore --colour=always"
elif [[ `which tree` == *tree ]]; then
	export REC_LISTING_CMD="tree -C"
else
	export REC_LISTING_CMD=""
fi

# generate log
generate_log() { 
	current_path=$PWD
	echo $current_path > $SMARTCD_CONFIG_DIR/smartcd_tmp.log
	cat $SMARTCD_CONFIG_FILE >> $SMARTCD_CONFIG_DIR/smartcd_tmp.log
	awk '!seen[$0]++' $SMARTCD_CONFIG_DIR/smartcd_tmp.log > $SMARTCD_CONFIG_FILE # remove duplicates
	rm -f $SMARTCD_CONFIG_DIR/smartcd_tmp.log
	sed -i '21,$ d' $SMARTCD_CONFIG_FILE # remove lines from line no. 21 to end. (keep only last 20 unique visited paths)
}

# feature
sub_dir_hop() {
	builtin cd $1 2> $SMARTCD_CONFIG_DIR/smartcd_error.log
	if [[ ! $? -eq 0 ]]; then # the directory is not in any of cdpath values
		fd --exclude .git/ -t d --min-depth=2 -i --hidden -F --max-results=1 --prune $1 > $SMARTCD_CONFIG_DIR/smartcd_fd.log
		no_of_paths=`wc -l $SMARTCD_CONFIG_DIR/smartcd_fd.log | cut -d' ' -f1` # check whether fd searched at least 1 path
		if [[ $no_of_paths -eq 0 ]]; then
			cat $SMARTCD_CONFIG_DIR/smartcd_error.log
		else
			if [[ $REC_LISTING_CMD == "" ]]; then
				selected_entry=($(fd --hidden --exclude .git/ --type d --min-depth=2 -i -F $1 | fzf))
			else
				selected_entry=($(fd --hidden --exclude .git/ --type d --min-depth=2 -i -F $1 | fzf --preview "$REC_LISTING_CMD {}"))
			fi

			[[ $selected_entry != "" ]] && builtin cd $selected_entry && generate_log
		fi
	else
		generate_log
	fi
}

# feature
recent_visited_dirs() {
	if [[ ! -s $SMARTCD_CONFIG_FILE ]]; then
		>&2 echo "No any visited directory in record !!"
	else
		if [[ $REC_LISTING_CMD == "" ]]; then
			selected_entry=($(cat $SMARTCD_CONFIG_FILE | fzf))
		else 
			selected_entry=($(cat $SMARTCD_CONFIG_FILE | fzf --preview "$REC_LISTING_CMD {}"))
		fi

		# since the selected entry is already from the log, use builtin cd
		[[ $selected_entry != "" ]] && builtin cd $selected_entry
	fi
}

# feature
parent_dir_hop() {
	_path=${PWD%/*}
	[[ -f $SMARTCD_CONFIG_DIR/smartcd_parent_dir.log ]] && truncate -s 0 $SMARTCD_CONFIG_DIR/smartcd_parent_dir.log

	while [[ $_path != "" ]]; do
		fd --search-path $_path -t d --max-depth=1 -i -H -F $1 >> $SMARTCD_CONFIG_DIR/smartcd_parent_dir.log
		_path=${_path%/*}
	done

	selected_entry=($(cat $SMARTCD_CONFIG_DIR/smartcd_parent_dir.log | fzf --preview "$REC_LISTING_CMD {}"))
	[[ $selected_entry != "" ]] && builtin cd $selected_entry && generate_log
}

cd() {
	if [[ $# -eq 2 && $1 == '..' ]]; then
		parent_dir_hop $2
	elif [[ $1 != '--' ]]; then
		sub_dir_hop $1
	else
		recent_visited_dirs
	fi
}
